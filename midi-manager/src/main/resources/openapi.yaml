openapi: 3.0.3
info:
  title: Midi API
  version: 1.0.0

paths:

  /midi/create:
    post:
      summary: Create a new midi entry
      description: "Create a new midi entry, with meta and binary data."
      operationId: createMidi
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                midiCreateData:
                  $ref: "#/components/schemas/MidiCreateRequest"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MidiWithData'
      tags:
        - Midi

  /midi/all:
    get:
      summary: Get all midis
      description: "Returns a list of midis."
      operationId: getMidis
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Midis'
      tags:
        - Midi

  /midi/{id}:
    post:
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      summary: Edit a midi item
      description: "Edit a midi item in the database."
      operationId: editMidi
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MidiWithData'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MidiWithData'
      tags:
        - Midi

    delete:
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      summary: Delete a midi item
      description: "Deletes metadata and binary midi data from the database."
      operationId: deleteMidi
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: string
      tags:
        - Midi

    get:
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      summary: Get midi by blobId
      description: "Get a midi with meta and binary data from the database by blobId."
      operationId: getMidi
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MidiWithData'
      tags:
        - Midi

components:
  schemas:

    MidiCreateRequest:
      type: object
      properties:
        userId:
          type: string
          format: uuid
          description: "User ID associated with the MIDI"
        isPrivate:
          type: boolean
          description: "Flag indicating if the MIDI is private"
        filename:
          type: string
          description: "Filename of the MIDI"
        artist:
          type: string
          description: "Artist of the MIDI"
        title:
          type: string
          description: "Title of the MIDI"
        midiFile:
          type: string
          description: "MIDI file in binary format (Base64)"
      required:
        - userId
        - filename
        - midiFile

    Midi:
      type: object
      properties:
        midiId:
          type: string
          format: uuid
          description: "Unique identifier for the MIDI"
        blobRef:
          type: string
          format: uuid
          description: "Reference to the blob"
        userRef:
          type: string
          format: uuid
          description: "Reference to the user"
        isPrivate:
          type: boolean
          description: "Flag indicating if the MIDI is private"
        filename:
          type: string
          description: "Filename of the MIDI"
        artist:
          type: string
          description: "Artist of the MIDI"
        title:
          type: string
          description: "Title of the MIDI"
        dateCreated:
          type: string
          format: date-time
          description: "Timestamp of creation"
        dateEdited:
          type: string
          format: date-time
          description: "Timestamp of last edit"
      required:
        - midiId
        - filename
        - dateCreated
        - dateEdited

    BinaryData:
      type: object
      properties:
        binaryId:
          type: string
          format: uuid
          description: "UUID associated with the MIDI"
        midiFile:
          type: string
          description: "MIDI file in binary format"
      required:
        - midiId
        - midiFile

    MidiWithData:
      type: object
      properties:
        meta:
          $ref: '#/components/schemas/Midi'
        binary:
          $ref: '#/components/schemas/BinaryData'

    Midis:
      type: object
      properties:
        midis:
          type: array
          items:
            $ref: '#/components/schemas/Midi'

servers:
  - url: http://{address}
    variables:
      address:
        default: localhost:8080
        description: The current environment
